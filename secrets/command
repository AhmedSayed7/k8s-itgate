$ echo -n 'admin' > username.txt
$ echo -n 'password' > password.txt
=====
kubectl create secret generic database-credentials \  
    --from-file=username.txt \ 
    --from-file=password.txt \
    --namespace=secrets-demo
    ===
kubectl -n secrets-demo get secrets
==
Creating Secrets Using a Manifest File
===
echo -n 'admin' | base64
echo -n 'password' | base64
====
apiVersion: v1
kind: Secret
metadata:
  name: demo-secret
type: Opaque
data:
  username: YWRtaW4=
  password: cGFzc3dvcmQ=
  ===
   kubectl -n secrets-demo apply -f demo-secret.yaml
   ====
   Using Secret data as container environment variables
apiVersion: v1
kind: Pod
metadata:
  name: env-pod
spec:
  containers:
    - name: secret-test
      image: nginx
      command: ['sh', '-c', 'echo "Username: $USER" "Password: $PASSWORD"']
      env:
        - name: USER
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: username.txt
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: password.txt
======
$ kubectl -n secrets-demo apply -f secret-test-evn-pod.yaml
$ kubectl -n secrets-demo describe pod env-pod
$ kubectl -n secrets-demo logs env-pod
===
Using Secret data as files in a volume mounted on a Podâ€™s container(s)
apiVersion: v1
kind: Pod
metadata: 
  name: volume-test-pod
spec:
  containers:
  - name: secret-test
    image: nginx
    volumeMounts:
    - name: secret-volume
      mountPath: /etc/config/secret
  volumes:
  - name: secret-volume
    secret:
      secretName: database-credentials
 ===
 $ kubectl -n secrets-demo apply -f secret-test-volume-pod.yaml
$ kubectl -n secrets-demo exec volume-test-pod -- cat /etc/config/secret/username.txt

$ kubectl -n secrets-demo exec volume-test-pod -- cat /etc/config/secret/password.txt

$ kubectl -n secrets-demo exec volume-test-pod -- ls /etc/config/secret     